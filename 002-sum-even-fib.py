#!/usr/bin/python3

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

# This code runs in 2.69412994385e-05 seconds.
import time

# This function sums the even numbers of the Fibonacci sequence below some limit, n.
def sum_even_fib_numbers(n):        # Accepts a limit, n, as a parameter.
    even_sum = 0                    # Variable to keep track of the sum.
    n1 = 1                          # First/Lagging number in Fib sequence.
    n2 = 2                          # Second/Leading number in Fib sequence.
    while n2 <= n:                  # While the leading number does not exceed the limit,
        if n2 % 2 == 0:             # If the leading number is even,
            even_sum += n2          # Add the value of the leading number to the sum.
        x = n1 + n2                 # Find next term in the sequence.
        n1 = n2                     # Set the lagging term.
        n2 = x                      # Set the leading term.
    return even_sum                 # Return the sum.

#print sum_even_fib_numbers(10)
s = time.time()
print(sum_even_fib_numbers(4000000))
f = time.time()
print(f - s)